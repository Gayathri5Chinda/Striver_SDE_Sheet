import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{       
        public static int count = 0;
        public static void merge(ArrayList<Integer> arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>();  
        int left = low;      
        int right = mid + 1; 

        while (left <= mid && right <= high) {
            if (arr.get(left) <= arr.get(right)) {
                temp.add(arr.get(left));
                left++;
            } else {
                temp.add(arr.get(right));
                right++;
            }
        }

        while (left <= mid) {
            temp.add(arr.get(left));
            left++;
        }

        while (right <= high) {
            temp.add(arr.get(right));
            right++;
        } 

        for (int i = low; i <= high; i++) {
            arr.set(i, temp.get(i - low));
            //arr.get(i) = temp.get(i - low);
        }
    }

    public static int countPairs(ArrayList<Integer> arr, int low, int mid, int high){
        int right = mid + 1;
        int count = 0;
        for(int i = low; i <= mid; i++){
            while(right <= high && arr.get(i) > 2 * arr.get(right)) right++;
            count = count + (right - (mid + 1));
        }
        return count;
    }
    public static int mergeSort(ArrayList<Integer> arr, int low, int high) {
        if (low >= high) return count;
        int count = 0;
        int mid = (low + high) / 2 ;
        count += mergeSort(arr, low, mid);  // left half
        count += mergeSort(arr, mid + 1, high); // right half
        count += countPairs(arr, low, mid, high);
        merge(arr, low, mid, high);  // merging sorted halves
        return count;
    }

    public static int reversePairs(ArrayList<Integer> arr) 
    {
        // Write your code here.
        int n = arr.size();
        return mergeSort(arr, 0, n-1);

    }
}
